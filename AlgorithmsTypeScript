


function subdomainVisits(cpdomains: string[]): string[] {

    // we have strings that are separated by commas
    // [] -> 
    // split the array based on space 
    // split the second half based on period
    // 
    
    let domains = new Map()
    let retStr: string [] = []
    
    for(let i=0; i<cpdomains.length; i++){
        let [count, domainName] = cpdomains[i].split(' ');
        
        let subDomain = domainName.split('.')
        
        for(let j=0; j<subDomain.length; j++){
            let sub = subDomain.slice(j).join('.')
            domains.set(sub, (domains.get(sub) || 0) + parseInt(count))
        }    
    }
    
    for(let [key, value] of domains){
        retStr.push(`${value} ${key}`)
    } 
    
    return retStr

};















class Logger {
    dict = new Map<string, number>()
    constructor() {
    }

    shouldPrintMessage(timestamp: number, message: string): boolean {
    
        if(this.dict.get(message) != null){
            if(this.dict.get(message)+10 <= timestamp){
                this.dict.set(message, timestamp)
                return true
            } else {
                return false
            }
        } else {
            this.dict.set(message, timestamp)
            return true
        }
        
    }
}










/**
 * Definition for singly-linked list.
 * class ListNode {
 *     val: number
 *     next: ListNode | null
 *     constructor(val?: number, next?: ListNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.next = (next===undefined ? null : next)
 *     }
 * }
 */

function removeElements(head: ListNode | null, val: number): ListNode | null {
    if(!head){
        return head
    }
    
    let prev = new ListNode(-Infinity, head)
    let curr = prev
    while(curr.next){
        if(curr.next.val === val) {
             curr.next = curr.next.next
        } else {
        curr = curr.next
        }
    }
    return prev.next
    
};
