// return indicies of two compliment pairs that add up to the target value input arr = [1,2,3,5] target = 5  |   output = [1, 2]

function solution(array: number[], target: number): number[] {

    const seenValueOnIndex = new Map<number, number>(); 
    
    for(let i=0 ; i<array.length; i++) {
        let difference = target - array[i]
        if(seenValueOnIndex.has(difference)){
            return [seenValueOnIndex.get(difference), i]
        }
        seenValueOnIndex.set(array[i], i)
    }
   
  return [];
}










// flip an array in place

function solution(array: number[]): number[] {

    let i = 0
    let j = array.length-1;
    while(i<j){
        let temp = array[i]
        array[i] = array[j]
        array[j] = temp
        
        i++
        j--
    }
    
    return array

}












// reversing an array in blocks 

function solution(array: number[], k: number): number[] {

   if (k <= 1 || k > array.length) {
    // If k is 1 or less, or greater than the length of the array, do nothing
    return array;
  }

  let result: number[] = [];

  for (let i = 0; i < array.length; i += k) {
    const block = array.slice(i, i + k);
    if (block.length === k) {
      // If the block is full, reverse it and add it to the result
      result.push(...block.reverse());
    } else {
      // If the block is not full, add it to the result as is
      result.push(...block.reverse());
    }
  }

  return result;
}

















function subdomainVisits(cpdomains: string[]): string[] {

    // we have strings that are separated by commas
    // [] -> 
    // split the array based on space 
    // split the second half based on period
    // 
    
    let domains = new Map()
    let retStr: string [] = []
    
    for(let i=0; i<cpdomains.length; i++){
        let [count, domainName] = cpdomains[i].split(' ');
        
        let subDomain = domainName.split('.')
        
        for(let j=0; j<subDomain.length; j++){
            let sub = subDomain.slice(j).join('.')
            domains.set(sub, (domains.get(sub) || 0) + parseInt(count))
        }    
    }
    
    for(let [key, value] of domains){
        retStr.push(`${value} ${key}`)
    } 
    
    return retStr

};















class Logger {
    dict = new Map<string, number>()
    constructor() {
    }

    shouldPrintMessage(timestamp: number, message: string): boolean {
    
        if(this.dict.get(message) != null){
            if(this.dict.get(message)+10 <= timestamp){
                this.dict.set(message, timestamp)
                return true
            } else {
                return false
            }
        } else {
            this.dict.set(message, timestamp)
            return true
        }
        
    }
}










/**
 * Definition for singly-linked list.
 * class ListNode {
 *     val: number
 *     next: ListNode | null
 *     constructor(val?: number, next?: ListNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.next = (next===undefined ? null : next)
 *     }
 * }
 */

function removeElements(head: ListNode | null, val: number): ListNode | null {
    if(!head){
        return head
    }
    
    let prev = new ListNode(-Infinity, head)
    let curr = prev
    while(curr.next){
        if(curr.next.val === val) {
             curr.next = curr.next.next
        } else {
        curr = curr.next
        }
    }
    return prev.next
    
};
