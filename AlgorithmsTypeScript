class Logger {
    dict = new Map<string, number>()
    constructor() {
    }

    shouldPrintMessage(timestamp: number, message: string): boolean {
    
        if(this.dict.get(message) != null){
            if(this.dict.get(message)+10 <= timestamp){
                this.dict.set(message, timestamp)
                return true
            } else {
                return false
            }
        } else {
            this.dict.set(message, timestamp)
            return true
        }
        
    }
}










/**
 * Definition for singly-linked list.
 * class ListNode {
 *     val: number
 *     next: ListNode | null
 *     constructor(val?: number, next?: ListNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.next = (next===undefined ? null : next)
 *     }
 * }
 */

function removeElements(head: ListNode | null, val: number): ListNode | null {
    if(!head){
        return head
    }
    
    let prev = new ListNode(-Infinity, head)
    let curr = prev
    while(curr.next){
        if(curr.next.val === val) {
             curr.next = curr.next.next
        } else {
        curr = curr.next
        }
    }
    return prev.next
    
};
